---
# Source: provider-aws.zzzz/charts/crossplane-provider-apiextensions-composition/templates/compostions-apiextensions-crossplane-io.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: nosqls.aws.api.example
spec:
  compositeTypeRef:
    apiVersion: aws.api.example/v1alpha1
    kind: NoSQL
  resources:
    - base:
        apiVersion: s3.aws.upbound.io/v1beta1
        kind: Bucket
        metadata:
          name: basic-bucket
        spec:
          forProvider:
            region: east-2
          providerConfigRef:
            name: default
      name: s3Bucket
      patches:
      - fromFieldPath: spec.location
        toFieldPath: spec.forProvider.region
        transforms:
        - map:
            EU: eu-north-1
            US: east-2
          type: map
        type: FromCompositeFieldPath
    - base:
        apiVersion: dynamodb.aws.upbound.io/v1beta1
        kind: Table
        metadata:
          name: nosql-database
        spec:
          forProvider:
            attribute:
            - name: S3ID
              type: S
            hashKey: S3ID
            readCapacity: 1
            region: east-2
            writeCapacity: 1
      name: dynamoDB
      patches:
      - fromFieldPath: spec.location
        toFieldPath: spec.forProvider.region
        transforms:
        - map:
            EU: eu-north-1
            US: east-2
          type: map
        type: FromCompositeFieldPath
---
# Source: provider-aws.zzzz/charts/crossplane-provider-apiextensions-composition/templates/compostions-apiextensions-crossplane-io.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eks-cluster
spec:
  compositeTypeRef:
    apiVersion: api.example/v1alpha1
    kind: EKSCluster
  mode: "Pipeline"
  writeConnectionSecretsToNamespace: "crossplane-system"
  pipeline:
    - functionRef:
        name: patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        patchSets:
        - name: common-parameters
          patches:
          - fromFieldPath: spec.parameters.region
            toFieldPath: spec.forProvider.region
            type: FromCompositeFieldPath
        resources:
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPC
            spec:
              forProvider:
                enableDnsHostnames: true
                enableDnsSupport: true
              providerConfigRef:
                name: dev-aws
          name: vpc
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.vpc-cidrBlock
            toFieldPath: spec.forProvider.cidrBlock
            type: FromCompositeFieldPath
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: InternetGateway
            metadata:
              labels:
                type: igw
            spec:
              forProvider:
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: internetgateway
          patches:
          - patchSetName: common-parameters
            type: PatchSet
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              labels:
                type: subnet
                visibility: public
            spec:
              forProvider:
                mapPublicIpOnLaunch: true
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: subnet-public-1
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.subnet1-public-cidrBlock
            toFieldPath: spec.forProvider.cidrBlock
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet1-public-availabilityZone
            toFieldPath: spec.forProvider.availabilityZone
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet1-public-availabilityZone
            toFieldPath: metadata.labels.zone
            type: FromCompositeFieldPath
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              labels:
                type: subnet
                visibility: public
            spec:
              forProvider:
                mapPublicIpOnLaunch: true
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: subnet-public-2
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.subnet2-public-cidrBlock
            toFieldPath: spec.forProvider.cidrBlock
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet2-public-availabilityZone
            toFieldPath: spec.forProvider.availabilityZone
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet2-public-availabilityZone
            toFieldPath: metadata.labels.zone
            type: FromCompositeFieldPath
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              labels:
                type: subnet
                visibility: private
            spec:
              forProvider:
                mapPublicIpOnLaunch: false
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: subnet-private-1
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.subnet1-private-cidrBlock
            toFieldPath: spec.forProvider.cidrBlock
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet1-private-availabilityZone
            toFieldPath: spec.forProvider.availabilityZone
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet1-private-availabilityZone
            toFieldPath: metadata.labels.zone
            type: FromCompositeFieldPath
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              labels:
                type: subnet
                visibility: private
            spec:
              forProvider:
                mapPublicIpOnLaunch: false
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: subnet-private-2
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.subnet2-private-cidrBlock
            toFieldPath: spec.forProvider.cidrBlock
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet2-private-availabilityZone
            toFieldPath: spec.forProvider.availabilityZone
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.subnet2-private-availabilityZone
            toFieldPath: metadata.labels.zone
            type: FromCompositeFieldPath
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: EIP
            metadata:
              labels:
                type: eip-1
            spec:
              forProvider:
                domain: vpc
              providerConfigRef:
                name: dev-aws
          name: elastic-ip-1
          patches:
          - patchSetName: common-parameters
            type: PatchSet
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: EIP
            metadata:
              labels:
                type: eip-2
            spec:
              forProvider:
                domain: vpc
              providerConfigRef:
                name: dev-aws
          name: elastic-ip-2
          patches:
          - patchSetName: common-parameters
            type: PatchSet
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: NATGateway
            metadata:
              labels:
                type: natgw-1
            spec:
              forProvider:
                allocationIdSelector:
                  matchLabels:
                    type: eip-1
                subnetIdSelector:
                  matchLabels:
                    type: subnet
                    visibility: public
              providerConfigRef:
                name: dev-aws
          name: natgateway-1
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.subnet1-public-availabilityZone
            toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
            type: FromCompositeFieldPath
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: NATGateway
            metadata:
              labels:
                type: natgw-2
            spec:
              forProvider:
                allocationIdSelector:
                  matchLabels:
                    type: eip-2
                subnetIdSelector:
                  matchLabels:
                    type: subnet
                    visibility: public
              providerConfigRef:
                name: dev-aws
          name: natgateway-2
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.subnet2-public-availabilityZone
            toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.zone
            type: FromCompositeFieldPath
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            spec:
              forProvider:
                region: PATCHED
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: routetable-public
          patches:
          - patchSetName: common-parameters
            type: PatchSet
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            spec:
              forProvider:
                region: PATCHED
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: routetable-private-1
          patches:
          - patchSetName: common-parameters
            type: PatchSet
        - base:
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            spec:
              forProvider:
                region: PATCHED
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: routetable-private-2
          patches:
          - patchSetName: common-parameters
            type: PatchSet
        - base:
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: Cluster
            spec:
              forProvider:
                vpcConfig:
                - endpointPrivateAccess: false
                  endpointPublicAccess: true
                  subnetIdSelector:
                    matchLabels:
                      type: subnet
                      visibility: private
              providerConfigRef:
                name: dev-aws
              writeConnectionSecretToRef:
                name: dev-connection-secret
                namespace: crossplane-system
          connectionDetails:
          - fromConnectionSecretKey: kubeconfig
            name: kubeconfig-value
            type: FromConnectionSecretKey
          name: eks-cluster
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.k8s-version
            toFieldPath: spec.forProvider.version
            type: FromCompositeFieldPath
          - fromFieldPath: metadata.uid
            toFieldPath: spec.writeConnectionSecretToRef.name
            transforms:
            - string:
                fmt: '%s-ekscluster-connection'
                type: Format
              type: string
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.cluster-role
            toFieldPath: spec.forProvider.roleArn
            type: FromCompositeFieldPath
        - base:
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: Role
            spec:
              forProvider:
                assumeRolePolicy: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Principal": {
                          "Service": "eks.amazonaws.com"
                        },
                        "Action": "sts:AssumeRole"
                      }
                    ]
                  }
              providerConfigRef:
                name: dev-aws
          name: role
        - base:
            apiVersion: iam.aws.upbound.io/v1beta1
            kind: RolePolicyAttachment
            spec:
              forProvider:
                policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
                roleSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: dev-aws
          name: rolePolicyAttachment
        - base:
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: NodeGroup
            spec:
              forProvider:
                clusterNameSelector:
                  matchControllerRef: true
                instanceTypes:
                - t3.medium
                scalingConfig:
                - minSize: 1
                subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    type: subnet
                    visibility: private
              providerConfigRef:
                name: dev-aws
          name: eks-nodegroup
          patches:
          - patchSetName: common-parameters
            type: PatchSet
          - fromFieldPath: spec.parameters.workers-size
            toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.workers-size
            toFieldPath: spec.forProvider.scalingConfig[0].maxSize
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.workload-type
            toFieldPath: spec.forProvider.amiType
            transforms:
            - map:
                gpu: x86_GPU
                non-gpu: x86
              type: map
            type: FromCompositeFieldPath
          - fromFieldPath: spec.parameters.workernode-role
            toFieldPath: spec.forProvider.nodeRoleArn
            type: FromCompositeFieldPath
      step: patch-and-transform
---
# Source: provider-aws.zzzz/charts/crossplane-provider-apiextensions-composition/templates/compostions-apiextensions-crossplane-io.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: vpc
spec:
  compositeTypeRef:
    apiVersion: api.example/v1alpha1
    kind: XVPC
  mode: "Pipeline"
  pipeline:
    - functionRef:
        name: go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        inline:
          template: |
            {{ $claimNamespace := index $.observed.composite.resource.metadata.labels "crossplane.io/claim-namespace" }}
            {{ $tenantAwsProviderConfigRef := printf "%s-aws" $claimNamespace }}
            {{ $params := get .observed.composite.resource.spec "parameters" | default dict }}
            ---
            apiVersion: ec2.aws.crossplane.io/v1beta1
            kind: VPC
            metadata:
              annotations:
                {{ setResourceNameAnnotation "vpc" }}
                crossplane.io/external-name: {{ get $params "id" | default ( print $claimNamespace "-vpc" ) }}
            spec:
              forProvider:
                region: {{ get $params "region" | default "east-1" }}
                vpcCidrBlock: {{ get $params "vpcCIDRBlock" | default "192.168.0.0/16" }}
                enableDnsSupport: true
                enableDnsHostNames: true
                instanceTenancy: default
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef }}
        kind: GoTemplate
        source: Inline
      step: compose-resources
---
# Source: provider-aws.zzzz/charts/crossplane-provider-apiextensions-composition/templates/compostions-apiextensions-crossplane-io.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: rdsinstance
spec:
  compositeTypeRef:
    apiVersion: api.example/v1alpha1
    kind: XRDSInstance
  mode: "Pipeline"
  pipeline:
    - functionRef:
        name: go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        inline:
          template: |
            {{ $claimNamespace := index $.observed.composite.resource.metadata.labels "crossplane.io/claim-namespace" }}
            {{ $claimNamespaceTrimmed := $claimNamespace | replace "-" "" }}
            {{ $tenantAwsProviderConfigRef := printf "%s-aws" $claimNamespace }}
            {{ $params := get .observed.composite.resource.spec "parameters" | default dict }}
            ---
            apiVersion: rds.aws.upbound.io/v1beta2
            kind: Instance
            metadata:
              annotations:
                {{ setResourceNameAnnotation "rdsInstance" }}
                crossplane.io/external-name: {{ get $params "id" | default ( print $claimNamespace "-rds-instance" ) }}
            spec:
              forProvider:
                allocatedStorage: {{ get $params "storage" | default 20 }}
                autoGeneratePassword: true
                autoMinorVersionUpgrade: true
                backupRetentionPeriod: 14
                backupWindow: "09:46-10:16"
                dbName: {{ get $params "name" | default ( print $claimNamespaceTrimmed "db" ) }}
                engine: postgres
                engineVersion: "16.1" # 16.3? console shows RDS 16.1-R2 (PostgreSQL 13.1-R2)
                instanceClass: {{ printf "db.t3.%s" (get $params "size" | default "micro") }}
                maintenanceWindow: Mon:00:00-Mon:03:00
                passwordSecretRef:
                  key: password
                  name: {{ printf "%s-rds-root" $claimNamespace }}
                  namespace: {{ $claimNamespace }}
                publiclyAccessible: false
                region: {{ printf "%s-1" (get $params "region" | default "east") }}
                skipFinalSnapshot: true
                storageEncrypted: true
                storageType: gp2
                username: adminuser
              writeConnectionSecretToRef:
                name: {{ printf "%s-rds-connection-details" $claimNamespace }}
                namespace: {{ $claimNamespace }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef }}
        kind: GoTemplate
        source: Inline
      step: compose-resources
---
# Source: provider-aws.zzzz/charts/crossplane-provider-apiextensions-composition/templates/compostions-apiextensions-crossplane-io.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: eksnetwork.api.example
spec:
  compositeTypeRef:
    apiVersion: api.example/v1alpha1
    kind: XEKSNetwork
  mode: "Pipeline"
  pipeline:
    - functionRef:
        name: go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        inline:
          template: |
            {{ $claimNamespace := index $.observed.composite.resource.metadata.labels "crossplane.io/claim-namespace" }}
            {{ $tenantAwsProviderConfigRef := printf "%s-aws" $claimNamespace }}
            {{ $params := get .observed.composite.resource.spec "parameters" | default dict }}
            ---
            {{ $vpcResourceName := "vpc" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: VPC
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $vpcResourceName }}
            spec:
              forProvider:
                cidrBlock: {{ $params.vpcCidrBlock | toYaml }}
                enableDnsHostnames: true
                enableDnsSupport: true
                tags:
                  Name: {{ printf "%s-%s" $params.id $vpcResourceName | toYaml }}
                region: {{ $params.region | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            ---
            {{ $igwResourceName := "internet-gateway" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: InternetGateway
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $igwResourceName }}
            spec:
              forProvider:
                region: {{ $params.region | toYaml }}
                tags:
                  Name: {{ printf "%s-%s" $params.id $igwResourceName | toYaml }}
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            {{ $region := $params.region | toYaml }}
            {{- range $i, $subnet := $params.subnets }}
            ---
            {{ $subnetResourceName := printf "subnet-%s-%s-%s" $subnet.availabilityZone $subnet.type (toString $i) }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Subnet
            metadata:
              labels:
                  zone: {{ $subnet.availabilityZone }}
                  {{- if eq $subnet.type "private" }}
                  access: private
                  {{- else }}
                  access: public
                  {{- end }}
                  eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $subnetResourceName }}
            spec:
              forProvider:
                cidrBlock: {{ $subnet.cidrBlock | toYaml }}
                {{ if eq $subnet.type "public" }}
                mapPublicIpOnLaunch: true
                {{ end }}
                tags:
                {{- if eq $subnet.type "private" }}
                  kubernetes.io/role/internal-elb: "1"
                {{- else }}
                  kubernetes.io/role/elb: "1"
                {{- end }}
                  Name: {{ printf "%s-%s" $params.id $subnetResourceName | toYaml }}
                region: {{ $region }}
                vpcIdSelector:
                  matchControllerRef: true
                availabilityZone: {{ $subnet.availabilityZone | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            {{- end }}
            ---
            {{ $routeTableResourceName := "route-table" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTable
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $routeTableResourceName }}
            spec:
              forProvider:
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $params.region | toYaml }}
                tags:
                  Name: {{ printf "%s-%s" $params.id $routeTableResourceName | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            ---
            {{ $publicRouteResourceName := "public-route" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: Route
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $publicRouteResourceName }}
            spec:
              forProvider:
                destinationCidrBlock: 0.0.0.0/0
                gatewayIdSelector:
                  matchControllerRef: true
                routeTableIdSelector:
                  matchControllerRef: true
                region: {{ $params.region | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            ---
            {{ $mainRouteTableAssociationResourceName := "main-route-table-association" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: MainRouteTableAssociation
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $mainRouteTableAssociationResourceName }}
            spec:
              forProvider:
                region: {{ $params.region | toYaml }}
                routeTableIdSelector:
                  matchControllerRef: true
                vpcIdSelector:
                  matchControllerRef: true
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            {{- range $i, $subnet := $params.subnets }}
            ---
            {{ $routeTableAssociationResourceName := printf "route-table-association-%s-%s-%s" $subnet.availabilityZone $subnet.type (toString $i) }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: RouteTableAssociation
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $routeTableAssociationResourceName }}
            spec:
              forProvider:
                region: {{ $region }}
                routeTableIdSelector:
                  matchControllerRef: true
                subnetIdSelector:
                  matchControllerRef: true
                  matchLabels:
                    {{- if eq $subnet.type "private" }}
                    access: private
                    {{- else }}
                    access: public
                    {{- end }}
                    zone: {{ $subnet.availabilityZone | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            {{- end }}
            ---
            {{ $sgResourceName := "security-group" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: SecurityGroup
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $sgResourceName }}
            spec:
              forProvider:
                description: Allow access to databases
                name: {{ printf "%s-%s" $params.id $sgResourceName | toYaml }}
                vpcIdSelector:
                  matchControllerRef: true
                region: {{ $params.region | toYaml }}
                tags:
                  Name: {{ printf "%s-%s" $params.id $sgResourceName | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            ---
            {{ $sgrpRulePostGresResourceName := "security-group-rule-postgres" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: SecurityGroupRule
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $sgrpRulePostGresResourceName }}
            spec:
              forProvider:
                cidrBlocks:
                  - 192.168.0.0/16
                description: Everywhere
                fromPort: 5432
                protocol: tcp
                securityGroupIdSelector:
                  matchControllerRef: true
                toPort: 5432
                type: ingress
                region: {{ $params.region | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
            ---
            {{ $sgrpRuleMySQLResourceName := "security-group-rule-mysql" }}
            apiVersion: ec2.aws.upbound.io/v1beta1
            kind: SecurityGroupRule
            metadata:
              labels:
                eksnetworks.api.example/network-id: {{ $params.id | toYaml }}
              annotations:
                {{ setResourceNameAnnotation $sgrpRuleMySQLResourceName }}
            spec:
              forProvider:
                cidrBlocks:
                  - 192.168.0.0/16
                description: Everywhere
                fromPort: 3306
                protocol: tcp
                securityGroupIdSelector:
                  matchControllerRef: true
                toPort: 3306
                type: ingress
                region: {{ $params.region | toYaml }}
              providerConfigRef:
                name: {{ $tenantAwsProviderConfigRef | toYaml }}
        kind: GoTemplate
        source: Inline
      step: compose-resources
    - functionRef:
        name: go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        inline:
          template: |
            {{ $observedResources := get .observed "resources" | default dict }}
            {{ $params := get .observed.composite.resource.spec "parameters" | default dict }}
            {{ $vpcStatus := dig "vpc" "resource" "status" dict $observedResources }}
            {{ $subnetsStatus := dict }}
            {{ range $i, $subnet := $params.subnets }}
              {{ $subnetResourceName := printf "subnet-%s-%s-%s" $subnet.availabilityZone $subnet.type (toString $i) }}
              {{ $subnetStatuses := dig $subnetResourceName "resource" "status" dict $observedResources }}
              {{ $subnetsStatus = merge $subnetsStatus (dict $subnetResourceName $subnetStatuses) }}
            {{ end }}
            apiVersion: api.example/v1alpha1
            kind: XEKSNetwork
            status:
              vpc: {{ $vpcStatus | toYaml | nindent 4 }}
              subnets: {{ $subnetsStatus | toYaml | nindent 4 }}
        kind: GoTemplate
        source: Inline
      step: set-xr-status
    - functionRef:
        name: auto-ready
      step: automatically-detect-ready-composed-resources
